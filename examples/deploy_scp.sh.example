#!/bin/bash

# This is an example deployment scripts which basically:
# - Creates a tarball of the entire site
# - Uploads the tarball to the server via SCP
# - Logs in to the server via SSH
# - Extracts the tarball to a new directory
# - Copies the public files directory to the newly extracted site
# - Replaces the old directory with the new
#
# You should be able to modify the variables in the beginning of this script,
# but please read through the entire script in order to understand what is going
# on. And do feel free to adjust in any way that that makes sense for your
# project.

# URL in order to connect to the server via SSH.
SSH_URL=root@example.com

# The base path for where the docroot exists and the directory name of the
# docroot.
BASE_PATH=/mnt/persist/www
DOCROOT=example

# Files relative to DOCROOT that we want to save. One per line.
KEEP_FILES=(
  .htaccess
  sites/all/files
  sites/default/files
  sites/default/settings.local.php
)

# The user and group that should own the files.
WWW_USER=root
WWW_GROUP=www-data

# This will most likely never have to be changed.
TEMP_PATH=/tmp

# File name of the build that is created.
# We add timestamp to avoid overwriting another concurrent build.
BUILD_NAME=build.$(date +%s.%N).tar.gz

# Where to initialize the new version.
TEMP_BUILD=${TEMP_PATH}/${DOCROOT}

# Expand some variables into full paths.
CURRENT_DOCROOT=${BASE_PATH}/${DOCROOT}

# Remove any Drush alias files.
rm public/sites/default/aliases.* sites/default/aliases.* 2> /dev/null

# Expand array variable to string so it can be used in heredoc below.
KEEP_FILES=${KEEP_FILES[@]}

# Create a tarball and save it as an artifact.
echo "Creating tarball..."
if [ -d public ]; then
  tar czf $CIRCLE_ARTIFACTS/$BUILD_NAME -C public/ .
else
  tar czf $CIRCLE_ARTIFACTS/$BUILD_NAME .
fi

# Create the installation script to be run on the remote server.
# This has to be done because there's like no possibility to
# defer variable expansion in a heredoc.
# Single $ will be expanded directly, escaped $ (\$) will be
# interpreted when script is run (last line in this file).
echo "Creating install script..."
cat << EOF > install.sh
  mkdir $TEMP_BUILD

  echo "Testing integrity of archive..."
  gunzip -c $TEMP_PATH/$BUILD_NAME | tar t > /dev/null

  # Check error status of the above command, then (if ok) extract archive.
  if [ \$? -eq 0 ]; then
    echo "Extract tarball to $TEMP_BUILD..."
    tar xzof $TEMP_PATH/$BUILD_NAME -C $TEMP_BUILD

    # Copy files and settings from the current docroot to the new one, if the
    # current directory exists, which won't be the case if this is a fresh deploy.
    for KEEP_FILE in $KEEP_FILES; do
      OLD_FILE=$CURRENT_DOCROOT/\$KEEP_FILE
      NEW_FILE=$TEMP_BUILD/\$KEEP_FILE
      if [ -e \$OLD_FILE ]; then
        if [ -d \$OLD_FILE ]; then
          echo "Copying everything in \$OLD_FILE/ to \$NEW_FILE/..."
          if [ ! -e \$NEW_FILE ]; then
            mkdir -p \$NEW_FILE
          fi
          cp -ra \$OLD_FILE/. \$NEW_FILE/
        else
          echo "Copying \$OLD_FILE to \$NEW_FILE..."
          cp -a \$OLD_FILE \$NEW_FILE
        fi
      else
        echo "\$OLD_FILE doesn't exist. You may need to create it manually."
      fi
    done

    # Change ownership to the user that is running the web server.
    echo "Changing ownership of $TEMP_BUILD to $WWW_USER:$WWW_GROUP"
    chown -R $WWW_USER:$WWW_GROUP $TEMP_BUILD

    # Make sure that the entire directory isn't writable by anyone except the
    # owner. Directories will get 750 since these should be executable, and files
    # will get 640.
    echo "Making $TEMP_BUILD writable for the owner only"
    find $TEMP_BUILD -type d -print0 | xargs -0 chmod 750
    find $TEMP_BUILD -type f -print0 | xargs -0 chmod 640

    echo "Making files directory writable by the owner and group"
    for TARGET in all default; do
      DIRECTORY=$TEMP_BUILD/sites/\$TARGET/files
      echo Setting permissions on \$DIRECTORY
      if [ "\$DIRECTORY" != "" -a -d "\$DIRECTORY" ]; then
        chmod -v 770 \$DIRECTORY
        find \$DIRECTORY -type d -exec chmod 770 {} \;
        find \$DIRECTORY -type f -exec chmod 660 {} \;
      fi
    done

    # Replace the current docroot with the new one, if the current directory
    # exists.
    if [ -d "$CURRENT_DOCROOT" ]; then
      echo "Replacing the old docroot contents with the new files"
      rm -r $CURRENT_DOCROOT && mv $TEMP_BUILD $CURRENT_DOCROOT
    else
      echo "Moving $TEMP_BUILD to $CURRENT_DOCROOT"
      mv $TEMP_BUILD $CURRENT_DOCROOT
    fi
  else
    echo "The tarball was found to be corrupted, please try to re-deploy."
  fi

  # Remove the tarball.
  rm -v $TEMP_PATH/$BUILD_NAME
EOF

# Copy the tarball to the remote server.
echo "Uploading tarball to ${SSH_URL}:${TEMP_PATH}"
scp $CIRCLE_ARTIFACTS/$BUILD_NAME $SSH_URL:$TEMP_PATH
echo
echo "Generated the following install script:"
cat install.sh
echo
echo "Running install script on remote host... Let's pray it works!"
ssh $SSH_URL 'bash -s' < install.sh
